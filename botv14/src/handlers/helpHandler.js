import { EmbedBuilder } from 'discord.js';

export async function handleHelpCommand(interaction) {
  const embeds = [
    createTicketEmbed(),
    createServiceEmbed(),
    createPresenceEmbed(),
    createConvocationEmbed(),
    createConfigEmbed()
  ];

  await interaction.reply({ embeds, ephemeral: true });
}

function createTicketEmbed() {
  return new EmbedBuilder()
    .setTitle('üé´ Syst√®me de Tickets')
    .setDescription('Gestion des tickets')
    .addFields([
      {
        name: 'Commandes Utilisateur',
        value: `
‚Ä¢ Envoyez la commande du service en MP au bot pour ouvrir un ticket
‚Ä¢ \`!close\` - Fermer votre ticket actif`
      },
      {
        name: 'Commandes Mod√©ration',
        value: `
‚Ä¢ \`/ticket list\` - Voir la liste des tickets actifs
‚Ä¢ \`/ticket close\` - Fermer un ticket sp√©cifique
‚Ä¢ \`/ticket toggle\` - Activer/d√©sactiver le syst√®me de tickets`
      }
    ])
    .setColor('#00FF00');
}

function createServiceEmbed() {
  return new EmbedBuilder()
    .setTitle('‚öôÔ∏è Gestion des Services')
    .setDescription('Configuration et gestion des services de tickets')
    .addFields([
      {
        name: 'Configuration',
        value: `
‚Ä¢ \`/service add\` - Cr√©er un nouveau service
‚Ä¢ \`/service roles\` - G√©rer les r√¥les d'un service
‚Ä¢ \`/service list\` - Voir la liste des services
‚Ä¢ \`/service delete\` - Supprimer un service
‚Ä¢ \`/service post\` - Afficher la liste des services dans le canal`
      }
    ])
    .setColor('#3498db');
}

function createPresenceEmbed() {
  return new EmbedBuilder()
    .setTitle('üë• Syst√®me de Pr√©sence')
    .setDescription('Gestion des pr√©sences et absences')
    .addFields([
      {
        name: 'Commandes',
        value: `
‚Ä¢ \`/presence absent\` - D√©clarer une absence
  ‚Ä¢ \`reason\` - Raison de l'absence (obligatoire)
  ‚Ä¢ \`until\` - Date de retour (optionnel)
‚Ä¢ \`/presence present\` - Marquer son retour
‚Ä¢ \`/presence status\` - Voir son statut actuel`
      }
    ])
    .setColor('#2ecc71');
}

function createConvocationEmbed() {
  return new EmbedBuilder()
    .setTitle('üì® Syst√®me de Convocations')
    .setDescription('Gestion des convocations')
    .addFields([
      {
        name: 'Commandes',
        value: `
‚Ä¢ \`/convocation create\` - Convoquer un utilisateur
  ‚Ä¢ \`user\` - Utilisateur √† convoquer
  ‚Ä¢ \`reason\` - Raison de la convocation
‚Ä¢ \`/convocation list\` - Voir les convocations en cours
‚Ä¢ \`/convocation recent\` - Voir les convocations des derni√®res 24h
‚Ä¢ \`/convocation complete\` - Marquer une convocation comme trait√©e
  ‚Ä¢ \`user\` - Utilisateur convoqu√©
  ‚Ä¢ \`summary\` - R√©sum√© de l'entretien`
      }
    ])
    .setColor('#e74c3c');
}

function createConfigEmbed() {
  return new EmbedBuilder()
    .setTitle('‚öôÔ∏è Configuration')
    .setDescription('Configuration du bot (Administrateurs uniquement)')
    .addFields([
      {
        name: 'Configuration Initiale',
        value: `
‚Ä¢ \`/setup\` - Configuration initiale du bot
  ‚Ä¢ Cr√©e les cat√©gories et salons n√©cessaires
  ‚Ä¢ Configure les permissions de base`
      },
      {
        name: 'Configuration Avanc√©e',
        value: `
‚Ä¢ \`/config logs\` - Configurer les salons de logs
  ‚Ä¢ \`ticket_logs\` - Logs des tickets
  ‚Ä¢ \`presence_logs\` - Logs des pr√©sences
  ‚Ä¢ \`summon_logs\` - Logs des convocations
‚Ä¢ \`/config help\` - Cr√©er le salon d'aide
‚Ä¢ \`/config summon\` - Configurer les r√¥les de convocation
  ‚Ä¢ \`add_role\` - Ajouter un r√¥le autoris√©
  ‚Ä¢ \`remove_role\` - Retirer un r√¥le autoris√©`
      }
    ])
    .setColor('#f1c40f');
}